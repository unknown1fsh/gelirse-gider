import { execSync } from 'child_process'
import * as fs from 'fs'
import * as path from 'path'
import * as readline from 'readline'

// Renk kodlarƒ±
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m',
}

function log(message: string, color = colors.reset) {
  console.log(`${color}${message}${colors.reset}`)
}

function prompt(question: string): Promise<string> {
  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout,
  })

  return new Promise(resolve => {
    rl.question(`${colors.yellow}${question}${colors.reset} `, answer => {
      rl.close()
      resolve(answer)
    })
  })
}

async function main() {
  log('\n‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó', colors.cyan)
  log('‚ïë     LOCAL VERITABANI ‚Üí NETLIFY SENKRONIZASYONU          ‚ïë', colors.cyan)
  log('‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n', colors.cyan)

  // .env dosyasƒ±ndan local DATABASE_URL oku
  const envPath = path.join(process.cwd(), '.env')
  if (!fs.existsSync(envPath)) {
    log('‚ùå .env dosyasƒ± bulunamadƒ±!', colors.red)
    process.exit(1)
  }

  const envContent = fs.readFileSync(envPath, 'utf-8')
  const localDbMatch = envContent.match(/DATABASE_URL="?([^"\n]+)"?/)
  const netlifyDbMatch = envContent.match(/NETLIFY_DATABASE_URL="?([^"\n]+)"?/)

  if (!localDbMatch) {
    log('‚ùå .env dosyasƒ±nda DATABASE_URL bulunamadƒ±!', colors.red)
    process.exit(1)
  }

  if (!netlifyDbMatch) {
    log('‚ùå .env dosyasƒ±nda NETLIFY_DATABASE_URL bulunamadƒ±!', colors.red)
    log('\nüí° L√ºtfen .env dosyasƒ±na Netlify PostgreSQL connection string ekleyin:', colors.yellow)
    log('   NETLIFY_DATABASE_URL="postgresql://..."', colors.yellow)
    process.exit(1)
  }

  const localDbUrl = localDbMatch[1]
  const netlifyDbUrl = netlifyDbMatch[1]

  log('üìä Veritabanƒ± Bilgileri:', colors.blue)
  log(`   Local:   ${localDbUrl.replace(/:[^:@]+@/, ':****@')}`, colors.bright)
  log(`   Netlify: ${netlifyDbUrl.replace(/:[^:@]+@/, ':****@')}`, colors.bright)

  // Uyarƒ±
  log('\n‚ö†Ô∏è  Dƒ∞KKAT: Bu i≈ülem:', colors.yellow)
  log('   1. Netlify veritabanƒ±ndaki T√úM verileri silecek', colors.red)
  log("   2. Local veritabanƒ±nƒ±zƒ± Netlify'e kopyalayacak", colors.green)
  log('   3. Bu i≈ülem GERƒ∞ ALINAMAZ!\n', colors.red)

  const confirm1 = await prompt('Devam etmek istediƒüinize emin misiniz? (evet/hayƒ±r): ')
  if (confirm1.toLowerCase() !== 'evet') {
    log('\n‚ùå ƒ∞≈ülem iptal edildi.', colors.yellow)
    process.exit(0)
  }

  const confirm2 = await prompt(
    'Netlify veritabanƒ±ndaki verilerin Sƒ∞Lƒ∞NECEƒûƒ∞Nƒ∞ anlƒ±yorum (EVET/hayƒ±r): '
  )
  if (confirm2 !== 'EVET') {
    log('\n‚ùå ƒ∞≈ülem iptal edildi.', colors.yellow)
    process.exit(0)
  }

  try {
    const dumpFile = path.join(process.cwd(), 'backup.sql')

    // 1. Local veritabanƒ±ndan dump al
    log('\nüì¶ 1/4 - Local veritabanƒ±ndan dump alƒ±nƒ±yor...', colors.cyan)
    try {
      execSync(`pg_dump "${localDbUrl}" --no-owner --no-acl -f "${dumpFile}"`, {
        stdio: 'inherit',
      })
      log('   ‚úÖ Dump ba≈üarƒ±yla alƒ±ndƒ±', colors.green)
    } catch (error) {
      log('   ‚ùå Dump alma hatasƒ±!', colors.red)
      log(
        "   üí° pg_dump y√ºkl√º deƒüilse PostgreSQL kurulu olmalƒ± veya PATH'e eklenmelidir",
        colors.yellow
      )
      throw error
    }

    // 2. Netlify veritabanƒ±nƒ± temizle
    log('\nüóëÔ∏è  2/4 - Netlify veritabanƒ± temizleniyor...', colors.cyan)
    try {
      // √ñnce t√ºm tablolarƒ± listele ve sil
      const dropTablesCmd = `
        psql "${netlifyDbUrl}" -c "
          DO $$ DECLARE
            r RECORD;
          BEGIN
            FOR r IN (SELECT tablename FROM pg_tables WHERE schemaname = 'public') LOOP
              EXECUTE 'DROP TABLE IF EXISTS ' || quote_ident(r.tablename) || ' CASCADE';
            END LOOP;
          END $$;
        "
      `
      execSync(dropTablesCmd, { stdio: 'inherit' })
      log('   ‚úÖ Veritabanƒ± temizlendi', colors.green)
    } catch (error) {
      log('   ‚ùå Temizleme hatasƒ±!', colors.red)
      throw error
    }

    // 3. Dump'ƒ± Netlify'e restore et
    log("\nüì• 3/4 - Dump Netlify'e y√ºkleniyor...", colors.cyan)
    try {
      execSync(`psql "${netlifyDbUrl}" -f "${dumpFile}"`, { stdio: 'inherit' })
      log('   ‚úÖ Veritabanƒ± ba≈üarƒ±yla y√ºklendi', colors.green)
    } catch (error) {
      log('   ‚ùå Restore hatasƒ±!', colors.red)
      throw error
    }

    // 4. Backup dosyasƒ±nƒ± sil
    log('\nüßπ 4/4 - Temizlik yapƒ±lƒ±yor...', colors.cyan)
    if (fs.existsSync(dumpFile)) {
      fs.unlinkSync(dumpFile)
      log('   ‚úÖ Ge√ßici dosyalar temizlendi', colors.green)
    }

    log('\n‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó', colors.green)
    log('‚ïë              SENKRONIZASYON BA≈ûARILI! üéâ                 ‚ïë', colors.green)
    log('‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n', colors.green)

    log("‚úÖ Local veritabanƒ±nƒ±z ba≈üarƒ±yla Netlify'e kopyalandƒ±!", colors.bright)
    log("\nüí° Artƒ±k Netlify'de local veritabanƒ±nƒ±zƒ±n tam kopyasƒ± mevcut.", colors.blue)
  } catch (error) {
    log('\n‚ùå HATA: Senkronizasyon ba≈üarƒ±sƒ±z!', colors.red)
    console.error(error)
    process.exit(1)
  }
}

main().catch(error => {
  log('\n‚ùå Beklenmeyen hata:', colors.red)
  console.error(error)
  process.exit(1)
})
