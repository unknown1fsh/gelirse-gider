'use client'

import { useState, useEffect } from 'react'
import { useRouter } from 'next/navigation'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Badge } from '@/components/ui/badge'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select'
import { Textarea } from '@/components/ui/textarea'
import PremiumUpgradeModal from '@/components/premium-upgrade-modal'
import {
  Building2,
  TrendingUp,
  TrendingDown,
  Plus,
  Eye,
  Edit,
  Trash2,
  Search,
  Filter,
  Download,
  Upload,
  BarChart3,
  PieChart,
  Activity,
  Target,
  Zap,
  Shield,
  Star,
  Crown,
  Rocket,
  Brain,
  Lightbulb,
  CheckCircle,
  AlertCircle,
  Info,
  Calendar,
  Clock,
  Globe,
  Layers,
  Coins,
  Banknote,
  CreditCard,
  Wallet,
  ArrowUpRight,
  ArrowDownRight,
  Maximize2,
  Minimize2,
  RefreshCw,
  Settings,
  Bell,
  Share2,
  Bookmark,
  Archive,
  FileText,
  Database,
  Cloud,
  Lock,
  Unlock,
  Sparkles,
  Award,
  Trophy,
  Medal,
  Gem,
  Diamond,
  Crown as CrownIcon,
  Flame,
  Thunderbolt,
  Sun,
  Moon,
  Mountain,
  Waves,
  TreePine,
  Leaf,
  Flower,
  Heart,
  Smile,
  ThumbsUp,
  MessageCircle,
  Phone,
  Mail,
  MapPin,
  Navigation,
  Compass,
  Map,
  Camera,
  Image,
  Video,
  Music,
  Headphones,
  Mic,
  Volume2,
  Play,
  Pause,
  Stop,
  SkipBack,
  SkipForward,
  Repeat,
  Shuffle,
  Radio,
  Tv,
  Monitor,
  Smartphone,
  Laptop,
  Tablet,
  Watch,
  Gamepad2,
  Joystick,
  Mouse,
  Keyboard,
  Printer,
  Scanner,
  HardDrive,
  Server,
  Router,
  Wifi,
  Bluetooth,
  Battery,
  BatteryCharging,
  Plug,
  Power,
  PowerOff,
  BatteryLow,
  BatteryMedium,
  BatteryHigh,
  BatteryFull,
} from 'lucide-react'

interface Investment {
  id: string
  type: 'stock' | 'fund' | 'bond' | 'crypto' | 'commodity' | 'forex' | 'real-estate' | 'other'
  name: string
  symbol: string
  quantity: number
  purchasePrice: number
  currentPrice: number
  totalValue: number
  profitLoss: number
  profitLossPercentage: number
  purchaseDate: string
  lastUpdate: string
  description?: string
  category: string
  riskLevel: 'low' | 'medium' | 'high'
  status: 'active' | 'sold' | 'pending'
}

const investmentTypes = [
  {
    id: 'stock',
    name: 'Hisse Senetleri',
    icon: TrendingUp,
    color: 'from-green-500 to-emerald-600',
    description: 'Borsa hisseleri ve ÅŸirket paylarÄ±',
    riskLevel: 'medium',
    popularity: 95,
  },
  {
    id: 'fund',
    name: 'YatÄ±rÄ±m FonlarÄ±',
    icon: PieChart,
    color: 'from-blue-500 to-indigo-600',
    description: 'Profesyonel yÃ¶netilen yatÄ±rÄ±m fonlarÄ±',
    riskLevel: 'low',
    popularity: 85,
  },
  {
    id: 'bond',
    name: 'Tahvil ve Bonolar',
    icon: Shield,
    color: 'from-purple-500 to-violet-600',
    description: 'Devlet ve kurumsal tahvilleri',
    riskLevel: 'low',
    popularity: 70,
  },
  {
    id: 'crypto',
    name: 'Kripto Paralar',
    icon: Coins,
    color: 'from-yellow-500 to-orange-600',
    description: 'Bitcoin, Ethereum ve diÄŸer kripto paralar',
    riskLevel: 'high',
    popularity: 90,
  },
  {
    id: 'commodity',
    name: 'Emtialar',
    icon: Layers,
    color: 'from-amber-500 to-yellow-600',
    description: 'AltÄ±n, gÃ¼mÃ¼ÅŸ, petrol ve diÄŸer emtialar',
    riskLevel: 'medium',
    popularity: 75,
  },
  {
    id: 'forex',
    name: 'DÃ¶viz',
    icon: Globe,
    color: 'from-cyan-500 to-blue-600',
    description: 'USD, EUR ve diÄŸer dÃ¶viz kurlarÄ±',
    riskLevel: 'high',
    popularity: 80,
  },
  {
    id: 'real-estate',
    name: 'Gayrimenkul',
    icon: Building2,
    color: 'from-red-500 to-rose-600',
    description: "Emlak yatÄ±rÄ±mlarÄ± ve REIT'ler",
    riskLevel: 'medium',
    popularity: 65,
  },
  {
    id: 'other',
    name: 'DiÄŸer AraÃ§lar',
    icon: Star,
    color: 'from-pink-500 to-purple-600',
    description: 'Vadeli iÅŸlemler, opsiyonlar ve diÄŸer araÃ§lar',
    riskLevel: 'high',
    popularity: 45,
  },
]

export default function InvestmentsPage() {
  const router = useRouter()
  const [investments, setInvestments] = useState<Investment[]>([])
  const [isLoading, setIsLoading] = useState(true)
  const [searchTerm, setSearchTerm] = useState('')
  const [selectedType, setSelectedType] = useState<string>('all')
  const [showAddModal, setShowAddModal] = useState(false)
  const [showPremiumModal, setShowPremiumModal] = useState(false)
  const [selectedInvestment, setSelectedInvestment] = useState<Investment | null>(null)
  const [activeTab, setActiveTab] = useState('portfolio')
  const [userPlan, setUserPlan] = useState<string>('free')
  const [userLoading, setUserLoading] = useState(true)

  // KullanÄ±cÄ± bilgisini al
  useEffect(() => {
    async function fetchUser() {
      try {
        const response = await fetch('/api/auth/me', { credentials: 'include' })
        if (response.ok) {
          const data = await response.json()
          setUserPlan(data.plan || 'free')
        }
      } catch (error) {
        console.error('KullanÄ±cÄ± bilgisi alÄ±namadÄ±:', error)
      } finally {
        setUserLoading(false)
      }
    }
    fetchUser()
  }, [])

  // GerÃ§ek yatÄ±rÄ±m verilerini getir
  useEffect(() => {
    if (userLoading) return

    async function fetchInvestments() {
      if (userPlan === 'free') {
        // Free kullanÄ±cÄ± - demo veriler gÃ¶ster
        const demoInvestments: Investment[] = [
      {
        id: '1',
        type: 'stock',
        name: 'Apple Inc.',
        symbol: 'AAPL',
        quantity: 10,
        purchasePrice: 150.0,
        currentPrice: 175.5,
        totalValue: 1755.0,
        profitLoss: 255.0,
        profitLossPercentage: 17.0,
        purchaseDate: '2024-01-15',
        lastUpdate: '2024-06-30',
        category: 'Teknoloji',
        riskLevel: 'medium',
        status: 'active',
      },
      {
        id: '2',
        type: 'crypto',
        name: 'Bitcoin',
        symbol: 'BTC',
        quantity: 0.5,
        purchasePrice: 45000.0,
        currentPrice: 67500.0,
        totalValue: 33750.0,
        profitLoss: 11250.0,
        profitLossPercentage: 50.0,
        purchaseDate: '2024-02-10',
        lastUpdate: '2024-06-30',
        category: 'Kripto',
        riskLevel: 'high',
        status: 'active',
      },
      {
        id: '3',
        type: 'fund',
        name: 'Borsa Ä°stanbul 100 Fonu',
        symbol: 'BIST100',
        quantity: 1000,
        purchasePrice: 12.5,
        currentPrice: 14.75,
        totalValue: 14750.0,
        profitLoss: 2250.0,
        profitLossPercentage: 18.0,
        purchaseDate: '2024-03-05',
        lastUpdate: '2024-06-30',
        category: 'Hisse Senedi Fonu',
        riskLevel: 'medium',
        status: 'active',
      },
    ]

        setInvestments(demoInvestments)
        setIsLoading(false)
      } else {
        // Premium kullanÄ±cÄ± - gerÃ§ek veriler getir
        try {
          const response = await fetch('/api/investments', { credentials: 'include' })
          if (response.ok) {
            const data = await response.json()
            setInvestments(data)
          }
        } catch (error) {
          console.error('YatÄ±rÄ±mlar alÄ±namadÄ±:', error)
        } finally {
          setIsLoading(false)
        }
      }
    }

    fetchInvestments()
  }, [userPlan, userLoading])

  const filteredInvestments = investments.filter(investment => {
    const matchesSearch =
      investment.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
      investment.symbol.toLowerCase().includes(searchTerm.toLowerCase())
    const matchesType = selectedType === 'all' || investment.type === selectedType
    return matchesSearch && matchesType
  })

  const totalValue = investments.reduce((sum, inv) => sum + inv.totalValue, 0)
  const totalProfitLoss = investments.reduce((sum, inv) => sum + inv.profitLoss, 0)
  const totalProfitLossPercentage =
    totalValue > 0 ? (totalProfitLoss / (totalValue - totalProfitLoss)) * 100 : 0

  const getTypeInfo = (type: string) => {
    return investmentTypes.find(t => t.id === type) || investmentTypes[7]
  }

  const handleAddInvestment = (investmentType: string) => {
    if (userPlan === 'free') {
      setShowPremiumModal(true)
    } else {
      // Premium kullanÄ±cÄ± - doÄŸrudan ekleme sayfasÄ±na git
      router.push(`/investments/${investmentType}/new`)
    }
  }

  if (isLoading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-100 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-16 w-16 border-b-2 border-blue-600 mx-auto mb-4"></div>
          <p className="text-xl text-gray-600">YatÄ±rÄ±m portfÃ¶yÃ¼ yÃ¼kleniyor...</p>
        </div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-100">
      {/* Hero Section */}
      <div className="relative overflow-hidden bg-gradient-to-r from-blue-600 via-purple-600 to-indigo-700">
        <div className="absolute inset-0 bg-black/20"></div>
        <div className="relative max-w-7xl mx-auto px-6 py-12">
          <div className="text-center text-white">
            <div className="inline-flex items-center justify-center w-20 h-20 bg-white/20 backdrop-blur-sm rounded-full mb-6">
              <Building2 className="h-10 w-10 text-white" />
            </div>
            <h1 className="text-5xl font-bold mb-4">ðŸš€ YatÄ±rÄ±m AraÃ§larÄ±</h1>
            <p className="text-xl text-blue-100 mb-8 max-w-3xl mx-auto">
              Profesyonel yatÄ±rÄ±m portfÃ¶yÃ¼nÃ¼zÃ¼ yÃ¶netin. Hisse senetleri, fonlar, kripto paralar ve
              daha fazlasÄ±!
            </p>

            {/* Portfolio Summary */}
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6 max-w-4xl mx-auto">
              <Card className="bg-white/10 backdrop-blur-sm border-white/20">
                <CardContent className="p-6 text-center">
                  <div className="text-3xl font-bold text-white mb-2">
                    â‚º{totalValue.toLocaleString('tr-TR', { minimumFractionDigits: 2 })}
                  </div>
                  <div className="text-blue-100">Toplam DeÄŸer</div>
                </CardContent>
              </Card>

              <Card className="bg-white/10 backdrop-blur-sm border-white/20">
                <CardContent className="p-6 text-center">
                  <div
                    className={`text-3xl font-bold mb-2 flex items-center justify-center ${
                      totalProfitLoss >= 0 ? 'text-green-300' : 'text-red-300'
                    }`}
                  >
                    {totalProfitLoss >= 0 ? (
                      <TrendingUp className="h-6 w-6 mr-1" />
                    ) : (
                      <TrendingDown className="h-6 w-6 mr-1" />
                    )}
                    â‚º
                    {Math.abs(totalProfitLoss).toLocaleString('tr-TR', {
                      minimumFractionDigits: 2,
                    })}
                  </div>
                  <div className="text-blue-100">Kar/Zarar</div>
                </CardContent>
              </Card>

              <Card className="bg-white/10 backdrop-blur-sm border-white/20">
                <CardContent className="p-6 text-center">
                  <div
                    className={`text-3xl font-bold mb-2 ${
                      totalProfitLossPercentage >= 0 ? 'text-green-300' : 'text-red-300'
                    }`}
                  >
                    {totalProfitLossPercentage >= 0 ? '+' : ''}
                    {totalProfitLossPercentage.toFixed(1)}%
                  </div>
                  <div className="text-blue-100">Getiri OranÄ±</div>
                </CardContent>
              </Card>
            </div>
          </div>
        </div>
      </div>

      <div className="max-w-7xl mx-auto px-6 py-8">
        {/* Investment Types Grid */}
        <div className="mb-12">
          <div className="text-center mb-8">
            <h2 className="text-3xl font-bold text-gray-800 mb-4">ðŸ’Ž YatÄ±rÄ±m AraÃ§larÄ±</h2>
            <p className="text-lg text-gray-600 max-w-2xl mx-auto">
              Ã‡eÅŸitli yatÄ±rÄ±m araÃ§larÄ± ile portfÃ¶yÃ¼nÃ¼zÃ¼ Ã§eÅŸitlendirin ve riskinizi daÄŸÄ±tÄ±n
            </p>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
            {investmentTypes.map(type => {
              const Icon = type.icon
              return (
                <Card
                  key={type.id}
                  className="group cursor-pointer hover:shadow-xl transition-all duration-300 hover:scale-105 border-2 hover:border-blue-300"
                  onClick={() => setSelectedType(selectedType === type.id ? 'all' : type.id)}
                >
                  <CardContent className="p-6">
                    <div
                      className={`inline-flex p-4 rounded-2xl bg-gradient-to-r ${type.color} mb-4 group-hover:scale-110 transition-transform`}
                    >
                      <Icon className="h-8 w-8 text-white" />
                    </div>
                    <h3 className="text-xl font-bold text-gray-800 mb-2">{type.name}</h3>
                    <p className="text-gray-600 mb-4">{type.description}</p>

                    <div className="flex items-center justify-between mb-4">
                      <Badge
                        variant={
                          type.riskLevel === 'low'
                            ? 'default'
                            : type.riskLevel === 'medium'
                              ? 'secondary'
                              : 'destructive'
                        }
                        className="text-xs"
                      >
                        {type.riskLevel === 'low'
                          ? 'DÃ¼ÅŸÃ¼k Risk'
                          : type.riskLevel === 'medium'
                            ? 'Orta Risk'
                            : 'YÃ¼ksek Risk'}
                      </Badge>
                      <div className="flex items-center text-sm text-gray-500">
                        <Star className="h-4 w-4 mr-1 text-yellow-500" />
                        {type.popularity}%
                      </div>
                    </div>

                    <Button
                      className="w-full bg-gradient-to-r from-blue-500 to-purple-600 hover:from-blue-600 hover:to-purple-700 text-white"
                      onClick={(e) => {
                        e.stopPropagation()
                        handleAddInvestment(type.id)
                      }}
                    >
                      <Plus className="h-4 w-4 mr-2" />
                      YatÄ±rÄ±m Ekle
                    </Button>
                  </CardContent>
                </Card>
              )
            })}
          </div>
        </div>

        {/* Portfolio Management */}
        <Tabs value={activeTab} onValueChange={setActiveTab} className="space-y-8">
          <TabsList className="grid w-full grid-cols-4 bg-white/80 backdrop-blur-sm">
            <TabsTrigger value="portfolio" className="flex items-center space-x-2">
              <PieChart className="h-4 w-4" />
              <span>PortfÃ¶y</span>
            </TabsTrigger>
            <TabsTrigger value="analysis" className="flex items-center space-x-2">
              <BarChart3 className="h-4 w-4" />
              <span>Analiz</span>
            </TabsTrigger>
            <TabsTrigger value="market" className="flex items-center space-x-2">
              <Activity className="h-4 w-4" />
              <span>Piyasa</span>
            </TabsTrigger>
            <TabsTrigger value="news" className="flex items-center space-x-2">
              <Bell className="h-4 w-4" />
              <span>Haberler</span>
            </TabsTrigger>
          </TabsList>

          <TabsContent value="portfolio" className="space-y-6">
            {/* Search and Filters */}
            <Card className="bg-white/80 backdrop-blur-sm">
              <CardContent className="p-6">
                <div className="flex flex-col md:flex-row gap-4">
                  <div className="flex-1">
                    <div className="relative">
                      <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
                      <Input
                        placeholder="YatÄ±rÄ±m ara..."
                        value={searchTerm}
                        onChange={e => setSearchTerm(e.target.value)}
                        className="pl-10"
                      />
                    </div>
                  </div>
                  <Select value={selectedType} onValueChange={setSelectedType}>
                    <SelectTrigger className="w-full md:w-48">
                      <SelectValue placeholder="TÃ¼m TÃ¼rler" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="all">TÃ¼m TÃ¼rler</SelectItem>
                      {investmentTypes.map(type => (
                        <SelectItem key={type.id} value={type.id}>
                          {type.name}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                  <Button
                    onClick={() => handleAddInvestment('stock')}
                    className="bg-gradient-to-r from-green-500 to-emerald-600 hover:from-green-600 hover:to-emerald-700 text-white"
                  >
                    <Plus className="h-4 w-4 mr-2" />
                    Yeni YatÄ±rÄ±m
                  </Button>
                </div>
              </CardContent>
            </Card>

            {/* Investments List */}
            <div className="grid gap-6">
              {filteredInvestments.map(investment => {
                const typeInfo = getTypeInfo(investment.type)
                const Icon = typeInfo.icon
                return (
                  <Card
                    key={investment.id}
                    className="bg-white/80 backdrop-blur-sm hover:shadow-lg transition-all duration-300"
                  >
                    <CardContent className="p-6">
                      <div className="flex items-center justify-between">
                        <div className="flex items-center space-x-4">
                          <div className={`p-3 rounded-xl bg-gradient-to-r ${typeInfo.color}`}>
                            <Icon className="h-6 w-6 text-white" />
                          </div>
                          <div>
                            <h3 className="text-xl font-bold text-gray-800">{investment.name}</h3>
                            <p className="text-gray-600">
                              {investment.symbol} â€¢ {investment.category}
                            </p>
                            <div className="flex items-center space-x-4 mt-2">
                              <Badge variant="outline" className="text-xs">
                                {investment.quantity} adet
                              </Badge>
                              <Badge
                                variant={
                                  investment.riskLevel === 'low'
                                    ? 'default'
                                    : investment.riskLevel === 'medium'
                                      ? 'secondary'
                                      : 'destructive'
                                }
                                className="text-xs"
                              >
                                {investment.riskLevel === 'low'
                                  ? 'DÃ¼ÅŸÃ¼k Risk'
                                  : investment.riskLevel === 'medium'
                                    ? 'Orta Risk'
                                    : 'YÃ¼ksek Risk'}
                              </Badge>
                            </div>
                          </div>
                        </div>

                        <div className="text-right">
                          <div className="text-2xl font-bold text-gray-800 mb-1">
                            â‚º
                            {investment.totalValue.toLocaleString('tr-TR', {
                              minimumFractionDigits: 2,
                            })}
                          </div>
                          <div
                            className={`flex items-center justify-end space-x-1 ${
                              investment.profitLoss >= 0 ? 'text-green-600' : 'text-red-600'
                            }`}
                          >
                            {investment.profitLoss >= 0 ? (
                              <TrendingUp className="h-4 w-4" />
                            ) : (
                              <TrendingDown className="h-4 w-4" />
                            )}
                            <span className="font-semibold">
                              â‚º
                              {Math.abs(investment.profitLoss).toLocaleString('tr-TR', {
                                minimumFractionDigits: 2,
                              })}
                            </span>
                            <span className="text-sm">
                              ({investment.profitLoss >= 0 ? '+' : ''}
                              {investment.profitLossPercentage.toFixed(1)}%)
                            </span>
                          </div>
                          <div className="text-sm text-gray-500 mt-1">
                            AlÄ±ÅŸ: â‚º
                            {investment.purchasePrice.toLocaleString('tr-TR', {
                              minimumFractionDigits: 2,
                            })}
                          </div>
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                )
              })}

              {filteredInvestments.length === 0 && (
                <Card className="bg-white/80 backdrop-blur-sm">
                  <CardContent className="p-12 text-center">
                    <Building2 className="h-16 w-16 text-gray-300 mx-auto mb-4" />
                    <h3 className="text-xl font-semibold text-gray-600 mb-2">
                      HenÃ¼z yatÄ±rÄ±m bulunmuyor
                    </h3>
                    <p className="text-gray-500 mb-6">
                      Ä°lk yatÄ±rÄ±mÄ±nÄ±zÄ± ekleyerek portfÃ¶yÃ¼nÃ¼zÃ¼ oluÅŸturmaya baÅŸlayÄ±n
                    </p>
                    <Button
                      onClick={() => handleAddInvestment('stock')}
                      className="bg-gradient-to-r from-blue-500 to-purple-600 hover:from-blue-600 hover:to-purple-700 text-white"
                    >
                      <Plus className="h-4 w-4 mr-2" />
                      Ä°lk YatÄ±rÄ±mÄ±mÄ± Ekle
                    </Button>
                  </CardContent>
                </Card>
              )}
            </div>
          </TabsContent>

          <TabsContent value="analysis" className="space-y-6">
            <Card className="bg-white/80 backdrop-blur-sm">
              <CardContent className="p-8">
                <div className="text-center">
                  <BarChart3 className="h-16 w-16 text-blue-500 mx-auto mb-4" />
                  <h3 className="text-2xl font-bold text-gray-800 mb-2">ðŸ“Š GeliÅŸmiÅŸ Analiz</h3>
                  <p className="text-gray-600 mb-6">
                    Premium Ã¼yelik ile detaylÄ± portfÃ¶y analizleri, risk hesaplamalarÄ± ve performans
                    raporlarÄ±na eriÅŸin
                  </p>
                  <Button
                    onClick={() => setShowPremiumModal(true)}
                    className="bg-gradient-to-r from-purple-500 to-pink-600 hover:from-purple-600 hover:to-pink-700 text-white"
                  >
                    <Crown className="h-4 w-4 mr-2" />
                    Premium Analizlere EriÅŸ
                  </Button>
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="market" className="space-y-6">
            <Card className="bg-white/80 backdrop-blur-sm">
              <CardContent className="p-8">
                <div className="text-center">
                  <Activity className="h-16 w-16 text-green-500 mx-auto mb-4" />
                  <h3 className="text-2xl font-bold text-gray-800 mb-2">
                    ðŸ“ˆ CanlÄ± Piyasa Verileri
                  </h3>
                  <p className="text-gray-600 mb-6">
                    GerÃ§ek zamanlÄ± piyasa verileri, fiyat hareketleri ve teknik analizler
                  </p>
                  <Button
                    onClick={() => setShowPremiumModal(true)}
                    className="bg-gradient-to-r from-green-500 to-emerald-600 hover:from-green-600 hover:to-emerald-700 text-white"
                  >
                    <Zap className="h-4 w-4 mr-2" />
                    CanlÄ± Verilere EriÅŸ
                  </Button>
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="news" className="space-y-6">
            <Card className="bg-white/80 backdrop-blur-sm">
              <CardContent className="p-8">
                <div className="text-center">
                  <Bell className="h-16 w-16 text-orange-500 mx-auto mb-4" />
                  <h3 className="text-2xl font-bold text-gray-800 mb-2">ðŸ“° YatÄ±rÄ±m Haberleri</h3>
                  <p className="text-gray-600 mb-6">
                    KiÅŸiselleÅŸtirilmiÅŸ haber akÄ±ÅŸÄ±, piyasa analizleri ve yatÄ±rÄ±m Ã¶nerileri
                  </p>
                  <Button
                    onClick={() => setShowPremiumModal(true)}
                    className="bg-gradient-to-r from-orange-500 to-red-600 hover:from-orange-600 hover:to-red-700 text-white"
                  >
                    <Sparkles className="h-4 w-4 mr-2" />
                    Premium Haberlere EriÅŸ
                  </Button>
                </div>
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>
      </div>

      {/* Premium Upgrade Modal */}
      <PremiumUpgradeModal
        isOpen={showPremiumModal}
        onClose={() => setShowPremiumModal(false)}
        featureName="GeliÅŸmiÅŸ YatÄ±rÄ±m AraÃ§larÄ±"
        limitInfo={{
          current: investments.length,
          limit: 5,
          type: 'analysis',
        }}
      />
    </div>
  )
}
