// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Reference Tables

// Sistem Parametreleri - Merkezi parametre yönetimi
model SystemParameter {
  id           Int      @id @default(autoincrement())
  paramGroup   String   @map("param_group") @db.VarChar(50)  // BANK, GOLD_TYPE, ACCOUNT_TYPE vb
  paramCode    String   @map("param_code") @db.VarChar(50)   // Parametre kodu
  paramValue   String   @map("param_value") @db.VarChar(255) // Parametre değeri
  displayName  String   @map("display_name") @db.VarChar(100) // Gösterim adı
  description  String?  @db.Text                              // Açıklama
  displayOrder Int      @default(0) @map("display_order")    // Sıralama
  metadata     Json?    @default("{}")                        // Ek bilgiler (JSON)
  isActive     Boolean  @default(true) @map("is_active")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  @@unique([paramGroup, paramCode])
  @@index([paramGroup, isActive])
  @@map("system_parameter")
}

model RefCurrency {
  id        Int      @id @default(autoincrement())
  code      String   @unique @db.VarChar(3)
  name      String   @db.VarChar(50)
  symbol    String   @db.VarChar(5)
  active    Boolean  @default(true)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  accounts         Account[]
  creditCards      CreditCard[]
  eWallets         EWallet[]
  investments      Investment[]
  transactions     Transaction[]
  autoPayments     AutoPayment[]
  fxRatesFrom      FxRate[] @relation("FromCurrency")
  fxRatesTo        FxRate[] @relation("ToCurrency")

  @@map("ref_currency")
}

model RefAccountType {
  id          Int      @id @default(autoincrement())
  code        String   @unique @db.VarChar(20)
  name        String   @db.VarChar(50)
  description String?
  active      Boolean  @default(true)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  accounts Account[]

  @@map("ref_account_type")
}

model RefTxType {
  id        Int      @id @default(autoincrement())
  code      String   @unique @db.VarChar(10)
  name      String   @db.VarChar(20)
  icon      String?  @db.VarChar(50)
  color     String?  @db.VarChar(20)
  active    Boolean  @default(true)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  categories   RefTxCategory[]
  transactions Transaction[]

  @@map("ref_tx_type")
}

model RefTxCategory {
  id          Int      @id @default(autoincrement())
  txTypeId    Int      @map("tx_type_id")
  code        String   @db.VarChar(30)
  name        String   @db.VarChar(50)
  description String?
  icon        String?  @db.VarChar(50)
  color       String?  @db.VarChar(20)
  isDefault   Boolean  @default(false) @map("is_default")
  active      Boolean  @default(true)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  txType       RefTxType      @relation(fields: [txTypeId], references: [id])
  transactions Transaction[]
  autoPayments AutoPayment[]

  @@unique([txTypeId, code])
  @@map("ref_tx_category")
}

model RefPaymentMethod {
  id          Int      @id @default(autoincrement())
  code        String   @unique @db.VarChar(20)
  name        String   @db.VarChar(50)
  description String?
  active      Boolean  @default(true)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  transactions Transaction[]
  autoPayments AutoPayment[]

  @@map("ref_payment_method")
}

model RefGoldType {
  id          Int      @id @default(autoincrement())
  code        String   @unique @db.VarChar(20)
  name        String   @db.VarChar(50)
  description String?
  active      Boolean  @default(true)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  goldItems GoldItem[]

  @@map("ref_gold_type")
}

model RefGoldPurity {
  id        Int      @id @default(autoincrement())
  code      String   @unique @db.VarChar(10)
  name      String   @db.VarChar(20)
  purity    Decimal  @db.Decimal(3, 1)
  active    Boolean  @default(true)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  goldItems GoldItem[]

  @@map("ref_gold_purity")
}

model RefBank {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(100)
  asciiName String   @unique @map("ascii_name") @db.VarChar(100)
  swiftBic  String?  @map("swift_bic") @db.VarChar(11)
  bankCode  String?  @map("bank_code") @db.VarChar(10)
  website   String?  @db.VarChar(100)
  active    Boolean  @default(true)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  accounts      Account[]
  creditCards   CreditCard[]
  beneficiaries Beneficiary[]

  @@map("ref_bank")
}

// User Management Tables

model User {
  id                Int      @id @default(autoincrement())
  email             String   @unique @db.VarChar(255)
  name              String   @db.VarChar(100)
  phone             String?  @db.VarChar(20)
  passwordHash      String   @map("password_hash") @db.VarChar(255)
  emailVerified     Boolean  @default(false) @map("email_verified")
  phoneVerified     Boolean  @default(false) @map("phone_verified")
  avatar            String?  @db.VarChar(500)
  timezone          String   @default("Europe/Istanbul") @db.VarChar(50)
  language          String   @default("tr") @db.VarChar(5)
  currency          String   @default("TRY") @db.VarChar(3)
  dateFormat        String   @default("DD/MM/YYYY") @map("date_format") @db.VarChar(20)
  numberFormat      String   @default("1.234,56") @map("number_format") @db.VarChar(20)
  theme             String   @default("light") @db.VarChar(20)
  notifications     Json     @default("{}")
  settings          Json     @default("{}")
  lastLoginAt       DateTime? @map("last_login_at")
  isActive          Boolean  @default(true) @map("is_active")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  // Relations
  sessions          UserSession[]
  subscriptions     UserSubscription[]
  accounts          Account[]
  creditCards       CreditCard[]
  eWallets          EWallet[]
  beneficiaries     Beneficiary[]
  transactions      Transaction[]
  autoPayments      AutoPayment[]
  goldItems         GoldItem[]
  investments       Investment[]
  portfolioSnapshots PortfolioSnapshot[]

  @@map("user")
}

model UserSession {
  id        String   @id @default(cuid())
  userId    Int      @map("user_id")
  token     String   @unique @db.VarChar(500)
  expiresAt DateTime @map("expires_at")
  userAgent String?  @map("user_agent") @db.Text
  ipAddress String?  @map("ip_address") @db.VarChar(45)
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_session")
}

model UserSubscription {
  id                Int      @id @default(autoincrement())
  userId            Int      @map("user_id")
  planId            String   @map("plan_id") @db.VarChar(50)
  status            String   @db.VarChar(20) // active, cancelled, expired, pending
  startDate         DateTime @map("start_date")
  endDate           DateTime @map("end_date")
  amount            Decimal  @db.Decimal(10, 2)
  currency          String   @db.VarChar(3)
  paymentMethod     String?  @map("payment_method") @db.VarChar(50)
  transactionId     String?  @map("transaction_id") @db.VarChar(100)
  autoRenew         Boolean  @default(true) @map("auto_renew")
  cancelledAt       DateTime? @map("cancelled_at")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_subscription")
}

// Main Tables

model Account {
  id            Int      @id @default(autoincrement())
  userId        Int      @map("user_id")
  name          String   @db.VarChar(100)
  accountTypeId Int      @map("account_type_id")
  bankId        Int      @map("bank_id")
  currencyId    Int      @map("currency_id")
  balance       Decimal  @default(0) @db.Decimal(15, 2)
  accountNumber String?  @map("account_number") @db.VarChar(50)
  iban          String?  @db.VarChar(34)
  active        Boolean  @default(true)
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relations
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  accountType RefAccountType @relation(fields: [accountTypeId], references: [id])
  bank        RefBank         @relation(fields: [bankId], references: [id])
  currency    RefCurrency     @relation(fields: [currencyId], references: [id])
  transactions Transaction[]
  autoPayments AutoPayment[]

  @@map("account")
}

model CreditCard {
  id                Int      @id @default(autoincrement())
  userId            Int      @map("user_id")
  name              String   @db.VarChar(100)
  bankId            Int      @map("bank_id")
  currencyId        Int      @map("currency_id")
  limitAmount       Decimal  @map("limit_amount") @db.Decimal(15, 2)
  availableLimit    Decimal  @map("available_limit") @db.Decimal(15, 2)
  statementDay      Int      @map("statement_day")
  dueDay            Int      @map("due_day")
  minPaymentPercent Decimal  @default(3.0) @map("min_payment_percent") @db.Decimal(5, 2)
  active            Boolean  @default(true)
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  // Relations
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  bank        RefBank         @relation(fields: [bankId], references: [id])
  currency    RefCurrency     @relation(fields: [currencyId], references: [id])
  transactions Transaction[]
  autoPayments AutoPayment[]

  @@map("credit_card")
}

// E-Cüzdanlar (PayPal, Papara, Ininal, vb.)
model EWallet {
  id           Int      @id @default(autoincrement())
  userId       Int      @map("user_id")
  name         String   @db.VarChar(100) // "PayPal Hesabım", "Papara", vb.
  provider     String   @db.VarChar(50)  // "PayPal", "Papara", "Ininal", vb.
  accountEmail String?  @map("account_email") @db.VarChar(255)
  accountPhone String?  @map("account_phone") @db.VarChar(20)
  balance      Decimal  @default(0) @db.Decimal(15, 2)
  currencyId   Int      @map("currency_id")
  active       Boolean  @default(true)
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  currency     RefCurrency    @relation(fields: [currencyId], references: [id])
  transactions Transaction[]
  autoPayments AutoPayment[]

  @@map("e_wallet")
}

// Alıcı/Kişi bilgileri (Havale/EFT için)
model Beneficiary {
  id           Int      @id @default(autoincrement())
  userId       Int      @map("user_id")
  name         String   @db.VarChar(100) // Kişi veya kurum adı
  iban         String?  @db.VarChar(34)
  accountNo    String?  @map("account_no") @db.VarChar(50)
  bankId       Int?     @map("bank_id")
  phoneNumber  String?  @map("phone_number") @db.VarChar(20)
  email        String?  @db.VarChar(255)
  description  String?  // Not
  active       Boolean  @default(true)
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  bank         RefBank?       @relation(fields: [bankId], references: [id])
  transactions Transaction[]
  autoPayments AutoPayment[]

  @@map("beneficiary")
}

model Transaction {
  id              Int      @id @default(autoincrement())
  userId          Int      @map("user_id")
  txTypeId        Int      @map("tx_type_id")
  categoryId      Int      @map("category_id")
  paymentMethodId Int      @map("payment_method_id")
  accountId       Int?     @map("account_id")
  creditCardId    Int?     @map("credit_card_id")
  eWalletId       Int?     @map("e_wallet_id")
  beneficiaryId   Int?     @map("beneficiary_id")
  amount          Decimal  @db.Decimal(15, 2)
  currencyId      Int      @map("currency_id")
  transactionDate DateTime @map("transaction_date") @db.Date
  description     String?
  notes           String?
  tags            String[]
  isRecurring     Boolean  @default(false) @map("is_recurring")
  recurringType   String?  @db.VarChar(20) @map("recurring_type")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // Relations
  user          User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  txType        RefTxType          @relation(fields: [txTypeId], references: [id])
  category      RefTxCategory      @relation(fields: [categoryId], references: [id])
  paymentMethod RefPaymentMethod   @relation(fields: [paymentMethodId], references: [id])
  account       Account?           @relation(fields: [accountId], references: [id], onDelete: Cascade)
  creditCard    CreditCard?        @relation(fields: [creditCardId], references: [id], onDelete: Cascade)
  eWallet       EWallet?           @relation(fields: [eWalletId], references: [id], onDelete: Cascade)
  beneficiary   Beneficiary?       @relation(fields: [beneficiaryId], references: [id], onDelete: Cascade)
  currency      RefCurrency        @relation(fields: [currencyId], references: [id])

  @@map("transaction")
}

model AutoPayment {
  id              Int      @id @default(autoincrement())
  userId          Int      @map("user_id")
  name            String   @db.VarChar(100)
  amount          Decimal  @db.Decimal(15, 2)
  currencyId      Int      @map("currency_id")
  accountId       Int?     @map("account_id")
  creditCardId    Int?     @map("credit_card_id")
  eWalletId       Int?     @map("e_wallet_id")
  beneficiaryId   Int?     @map("beneficiary_id")
  paymentMethodId Int      @map("payment_method_id")
  categoryId      Int      @map("category_id")
  cronSchedule    String   @map("cron_schedule") @db.VarChar(100)
  nextPaymentDate DateTime? @map("next_payment_date") @db.Date
  active          Boolean  @default(true)
  description     String?
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // Relations
  user          User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  currency      RefCurrency        @relation(fields: [currencyId], references: [id])
  account       Account?           @relation(fields: [accountId], references: [id], onDelete: Cascade)
  creditCard    CreditCard?        @relation(fields: [creditCardId], references: [id], onDelete: Cascade)
  eWallet       EWallet?           @relation(fields: [eWalletId], references: [id], onDelete: Cascade)
  beneficiary   Beneficiary?       @relation(fields: [beneficiaryId], references: [id], onDelete: Cascade)
  paymentMethod RefPaymentMethod   @relation(fields: [paymentMethodId], references: [id])
  category      RefTxCategory      @relation(fields: [categoryId], references: [id])

  @@map("auto_payment")
}

model GoldItem {
  id              Int      @id @default(autoincrement())
  userId          Int      @map("user_id")
  name            String   @db.VarChar(100)
  goldTypeId      Int      @map("gold_type_id")
  goldPurityId    Int      @map("gold_purity_id")
  weightGrams     Decimal  @map("weight_grams") @db.Decimal(8, 3)
  purchasePrice   Decimal  @map("purchase_price") @db.Decimal(15, 2)
  purchaseDate    DateTime @map("purchase_date") @db.Date
  currentValueTry Decimal? @map("current_value_try") @db.Decimal(15, 2)
  description     String?
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // Relations
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  goldType  RefGoldType @relation(fields: [goldTypeId], references: [id])
  goldPurity RefGoldPurity @relation(fields: [goldPurityId], references: [id])

  @@map("gold_item")
}

model FxRate {
  id              Int      @id @default(autoincrement())
  fromCurrencyId  Int      @map("from_currency_id")
  toCurrencyId    Int      @map("to_currency_id")
  rate            Decimal  @db.Decimal(15, 6)
  rateDate        DateTime @map("rate_date") @db.Date
  source          String   @default("TCMB") @db.VarChar(50)
  createdAt       DateTime @default(now()) @map("created_at")

  // Relations
  fromCurrency RefCurrency @relation("FromCurrency", fields: [fromCurrencyId], references: [id])
  toCurrency   RefCurrency @relation("ToCurrency", fields: [toCurrencyId], references: [id])

  @@unique([fromCurrencyId, toCurrencyId, rateDate])
  @@map("fx_rate")
}

model PortfolioSnapshot {
  id               Int      @id @default(autoincrement())
  userId           Int      @map("user_id")
  snapshotDate     DateTime @map("snapshot_date") @db.Date
  totalAssets      Decimal  @map("total_assets") @db.Decimal(15, 2)
  totalLiabilities Decimal  @map("total_liabilities") @db.Decimal(15, 2)
  netWorth         Decimal  @map("net_worth") @db.Decimal(15, 2)
  breakdown        Json
  createdAt        DateTime @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, snapshotDate])
  @@map("portfolio_snapshot")
}

// Yatırım Araçları (Premium özelliği)
model Investment {
  id              Int      @id @default(autoincrement())
  userId          Int      @map("user_id")
  investmentType  String   @map("investment_type") @db.VarChar(50) // stock, crypto, fund, bond, commodity, forex, real-estate, other
  name            String   @db.VarChar(200)
  symbol          String?  @db.VarChar(20)  // AAPL, BTC, THYAO, vb.
  quantity        Decimal  @db.Decimal(18, 8)
  purchasePrice   Decimal  @map("purchase_price") @db.Decimal(15, 2)
  currentPrice    Decimal? @map("current_price") @db.Decimal(15, 2)
  purchaseDate    DateTime @map("purchase_date") @db.Date
  currencyId      Int      @map("currency_id")
  category        String?  @db.VarChar(100) // Teknoloji, Finans, Enerji vb.
  riskLevel       String   @map("risk_level") @db.VarChar(20) // low, medium, high
  notes           String?
  metadata        Json?    @default("{}")  // API'den gelen ek bilgiler (logo, website, vb.)
  lastPriceUpdate DateTime? @map("last_price_update")
  active          Boolean  @default(true)
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // Relations
  user     User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  currency RefCurrency @relation(fields: [currencyId], references: [id])

  @@index([userId, active])
  @@index([investmentType])
  @@map("investment")
}

