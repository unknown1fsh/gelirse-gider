import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function main() {
  console.log('ðŸŒ± Seed baÅŸlatÄ±lÄ±yor...')

  // Para birimleri
  const currencies = await Promise.all([
    prisma.refCurrency.upsert({
      where: { code: 'TRY' },
      update: {},
      create: { code: 'TRY', name: 'TÃ¼rk LirasÄ±', symbol: 'â‚º' },
    }),
    prisma.refCurrency.upsert({
      where: { code: 'USD' },
      update: {},
      create: { code: 'USD', name: 'Amerikan DolarÄ±', symbol: '$' },
    }),
    prisma.refCurrency.upsert({
      where: { code: 'EUR' },
      update: {},
      create: { code: 'EUR', name: 'Euro', symbol: 'â‚¬' },
    }),
    prisma.refCurrency.upsert({
      where: { code: 'GBP' },
      update: {},
      create: { code: 'GBP', name: 'Ä°ngiliz Sterlini', symbol: 'Â£' },
    }),
    prisma.refCurrency.upsert({
      where: { code: 'CHF' },
      update: {},
      create: { code: 'CHF', name: 'Ä°sviÃ§re FrangÄ±', symbol: 'CHF' },
    }),
    prisma.refCurrency.upsert({
      where: { code: 'JPY' },
      update: {},
      create: { code: 'JPY', name: 'Japon Yeni', symbol: 'Â¥' },
    }),
    prisma.refCurrency.upsert({
      where: { code: 'XAU' },
      update: {},
      create: { code: 'XAU', name: 'AltÄ±n', symbol: 'Au' },
    }),
  ])

  console.log('âœ… Para birimleri eklendi')

  // Hesap tÃ¼rleri
  const accountTypes = await Promise.all([
    prisma.refAccountType.upsert({
      where: { code: 'VADESIZ' },
      update: {},
      create: { code: 'VADESIZ', name: 'Vadesiz', description: 'Vadesiz mevduat hesabÄ±' },
    }),
    prisma.refAccountType.upsert({
      where: { code: 'VADELI' },
      update: {},
      create: { code: 'VADELI', name: 'Vadeli', description: 'Vadeli mevduat hesabÄ±' },
    }),
    prisma.refAccountType.upsert({
      where: { code: 'ALTIN' },
      update: {},
      create: { code: 'ALTIN', name: 'AltÄ±n', description: 'AltÄ±n hesabÄ±' },
    }),
    prisma.refAccountType.upsert({
      where: { code: 'DOVIZ' },
      update: {},
      create: { code: 'DOVIZ', name: 'DÃ¶viz', description: 'DÃ¶viz hesabÄ±' },
    }),
  ])

  console.log('âœ… Hesap tÃ¼rleri eklendi')

  // Ä°ÅŸlem tÃ¼rleri
  const txTypes = await Promise.all([
    prisma.refTxType.upsert({
      where: { code: 'GELIR' },
      update: { icon: 'TrendingUp', color: '#10b981' },
      create: { code: 'GELIR', name: 'Gelir', icon: 'TrendingUp', color: '#10b981' },
    }),
    prisma.refTxType.upsert({
      where: { code: 'GIDER' },
      update: { icon: 'TrendingDown', color: '#ef4444' },
      create: { code: 'GIDER', name: 'Gider', icon: 'TrendingDown', color: '#ef4444' },
    }),
  ])

  console.log('âœ… Ä°ÅŸlem tÃ¼rleri eklendi')

  // Ä°ÅŸlem kategorileri
  const gelirCategories = await Promise.all([
    prisma.refTxCategory.upsert({
      where: { txTypeId_code: { txTypeId: txTypes[0].id, code: 'MAAS' } },
      update: {},
      create: {
        txTypeId: txTypes[0].id,
        code: 'MAAS',
        name: 'MaaÅŸ',
        description: 'AylÄ±k maaÅŸ geliri',
      },
    }),
    prisma.refTxCategory.upsert({
      where: { txTypeId_code: { txTypeId: txTypes[0].id, code: 'YEMEK_KARTI' } },
      update: {},
      create: {
        txTypeId: txTypes[0].id,
        code: 'YEMEK_KARTI',
        name: 'Yemek KartÄ±',
        description: 'Yemek kartÄ± geliri',
      },
    }),
    prisma.refTxCategory.upsert({
      where: { txTypeId_code: { txTypeId: txTypes[0].id, code: 'EK_GELIR' } },
      update: {},
      create: {
        txTypeId: txTypes[0].id,
        code: 'EK_GELIR',
        name: 'Ek Gelir',
        description: 'Ek gelir kaynaklarÄ±',
      },
    }),
    prisma.refTxCategory.upsert({
      where: { txTypeId_code: { txTypeId: txTypes[0].id, code: 'FAIZ_GELIRI' } },
      update: {},
      create: {
        txTypeId: txTypes[0].id,
        code: 'FAIZ_GELIRI',
        name: 'Faiz Geliri',
        description: 'Faiz gelirleri',
      },
    }),
    prisma.refTxCategory.upsert({
      where: { txTypeId_code: { txTypeId: txTypes[0].id, code: 'DIGER_GELIR' } },
      update: {},
      create: {
        txTypeId: txTypes[0].id,
        code: 'DIGER_GELIR',
        name: 'DiÄŸer Gelir',
        description: 'DiÄŸer gelir tÃ¼rleri',
      },
    }),
  ])

  const giderCategories = await Promise.all([
    prisma.refTxCategory.upsert({
      where: { txTypeId_code: { txTypeId: txTypes[1].id, code: 'MARKET' } },
      update: {},
      create: {
        txTypeId: txTypes[1].id,
        code: 'MARKET',
        name: 'Market',
        description: 'Market alÄ±ÅŸveriÅŸi',
      },
    }),
    prisma.refTxCategory.upsert({
      where: { txTypeId_code: { txTypeId: txTypes[1].id, code: 'KIRA' } },
      update: {},
      create: {
        txTypeId: txTypes[1].id,
        code: 'KIRA',
        name: 'Kira',
        description: 'Kira Ã¶demeleri',
      },
    }),
    prisma.refTxCategory.upsert({
      where: { txTypeId_code: { txTypeId: txTypes[1].id, code: 'FATURA' } },
      update: {},
      create: {
        txTypeId: txTypes[1].id,
        code: 'FATURA',
        name: 'Fatura',
        description: 'Elektrik, su, doÄŸalgaz faturalarÄ±',
      },
    }),
    prisma.refTxCategory.upsert({
      where: { txTypeId_code: { txTypeId: txTypes[1].id, code: 'ULASIM' } },
      update: {},
      create: {
        txTypeId: txTypes[1].id,
        code: 'ULASIM',
        name: 'UlaÅŸÄ±m',
        description: 'UlaÅŸÄ±m giderleri',
      },
    }),
    prisma.refTxCategory.upsert({
      where: { txTypeId_code: { txTypeId: txTypes[1].id, code: 'SAGLIK' } },
      update: {},
      create: {
        txTypeId: txTypes[1].id,
        code: 'SAGLIK',
        name: 'SaÄŸlÄ±k',
        description: 'SaÄŸlÄ±k giderleri',
      },
    }),
    prisma.refTxCategory.upsert({
      where: { txTypeId_code: { txTypeId: txTypes[1].id, code: 'VERGI' } },
      update: {},
      create: {
        txTypeId: txTypes[1].id,
        code: 'VERGI',
        name: 'Vergi',
        description: 'Vergi Ã¶demeleri',
      },
    }),
    prisma.refTxCategory.upsert({
      where: { txTypeId_code: { txTypeId: txTypes[1].id, code: 'ABONELIK' } },
      update: {},
      create: {
        txTypeId: txTypes[1].id,
        code: 'ABONELIK',
        name: 'Abonelik',
        description: 'Abonelik Ã¶demeleri',
      },
    }),
    prisma.refTxCategory.upsert({
      where: { txTypeId_code: { txTypeId: txTypes[1].id, code: 'EGLENCE' } },
      update: {},
      create: {
        txTypeId: txTypes[1].id,
        code: 'EGLENCE',
        name: 'EÄŸlence',
        description: 'EÄŸlence giderleri',
      },
    }),
    prisma.refTxCategory.upsert({
      where: { txTypeId_code: { txTypeId: txTypes[1].id, code: 'DIGER_GIDER' } },
      update: {},
      create: {
        txTypeId: txTypes[1].id,
        code: 'DIGER_GIDER',
        name: 'DiÄŸer Gider',
        description: 'DiÄŸer gider tÃ¼rleri',
      },
    }),
  ])

  console.log('âœ… Ä°ÅŸlem kategorileri eklendi')

  // Ã–deme yÃ¶ntemleri
  const paymentMethods = await Promise.all([
    prisma.refPaymentMethod.upsert({
      where: { code: 'NAKIT' },
      update: {},
      create: { code: 'NAKIT', name: 'Nakit', description: 'Nakit Ã¶deme' },
    }),
    prisma.refPaymentMethod.upsert({
      where: { code: 'HAVALE_EFT' },
      update: {},
      create: { code: 'HAVALE_EFT', name: 'Havale/EFT', description: 'Banka havalesi veya EFT' },
    }),
    prisma.refPaymentMethod.upsert({
      where: { code: 'KREDI_KARTI' },
      update: {},
      create: { code: 'KREDI_KARTI', name: 'Kredi KartÄ±', description: 'Kredi kartÄ± ile Ã¶deme' },
    }),
    prisma.refPaymentMethod.upsert({
      where: { code: 'DEBIT_KARTI' },
      update: {},
      create: { code: 'DEBIT_KARTI', name: 'Debit KartÄ±', description: 'Debit kartÄ± ile Ã¶deme' },
    }),
    prisma.refPaymentMethod.upsert({
      where: { code: 'E_CUZDAN' },
      update: {},
      create: { code: 'E_CUZDAN', name: 'E-CÃ¼zdan', description: 'Elektronik cÃ¼zdan ile Ã¶deme' },
    }),
  ])

  console.log('âœ… Ã–deme yÃ¶ntemleri eklendi')

  // AltÄ±n tÃ¼rleri - TÃ¼rkiye'de yaygÄ±n altÄ±n ve ziynet eÅŸyalarÄ±
  const goldTypes = await Promise.all([
    // TakÄ±lar
    prisma.refGoldType.upsert({
      where: { code: 'BILEZIK' },
      update: {},
      create: { code: 'BILEZIK', name: 'Bilezik', description: 'AltÄ±n bilezik' },
    }),
    prisma.refGoldType.upsert({
      where: { code: 'KOLYE' },
      update: {},
      create: { code: 'KOLYE', name: 'Kolye', description: 'AltÄ±n kolye' },
    }),
    prisma.refGoldType.upsert({
      where: { code: 'KUPE' },
      update: {},
      create: { code: 'KUPE', name: 'KÃ¼pe', description: 'AltÄ±n kÃ¼pe' },
    }),
    prisma.refGoldType.upsert({
      where: { code: 'YUZUK' },
      update: {},
      create: { code: 'YUZUK', name: 'YÃ¼zÃ¼k', description: 'AltÄ±n yÃ¼zÃ¼k' },
    }),
    prisma.refGoldType.upsert({
      where: { code: 'IMAM_NIKAHLI' },
      update: {},
      create: { code: 'IMAM_NIKAHLI', name: 'Ä°mam NikahlÄ±', description: 'Ä°mam nikahlÄ± bilezik' },
    }),
    prisma.refGoldType.upsert({
      where: { code: 'SET_TAKIM' },
      update: {},
      create: { code: 'SET_TAKIM', name: 'Set/TakÄ±m', description: 'AltÄ±n set veya takÄ±m' },
    }),

    // AltÄ±n paralar
    prisma.refGoldType.upsert({
      where: { code: 'CUMHURIYET_ALTINI' },
      update: {},
      create: {
        code: 'CUMHURIYET_ALTINI',
        name: 'Cumhuriyet AltÄ±nÄ±',
        description: 'Tam Cumhuriyet altÄ±nÄ± (7.2 gr)',
      },
    }),
    prisma.refGoldType.upsert({
      where: { code: 'YARIM_ALTIN' },
      update: {},
      create: {
        code: 'YARIM_ALTIN',
        name: 'YarÄ±m AltÄ±n',
        description: 'YarÄ±m Cumhuriyet altÄ±nÄ± (3.6 gr)',
      },
    }),
    prisma.refGoldType.upsert({
      where: { code: 'CEYREK_ALTIN' },
      update: {},
      create: {
        code: 'CEYREK_ALTIN',
        name: 'Ã‡eyrek AltÄ±n',
        description: 'Ã‡eyrek Cumhuriyet altÄ±nÄ± (1.8 gr)',
      },
    }),
    prisma.refGoldType.upsert({
      where: { code: 'RESAT_ALTINI' },
      update: {},
      create: { code: 'RESAT_ALTINI', name: 'ReÅŸat AltÄ±nÄ±', description: 'ReÅŸat altÄ±nÄ±' },
    }),
    prisma.refGoldType.upsert({
      where: { code: 'HAMIT_ALTINI' },
      update: {},
      create: { code: 'HAMIT_ALTINI', name: 'Hamit AltÄ±nÄ±', description: 'Hamit altÄ±nÄ±' },
    }),

    // KÃ¼lÃ§e ve bar
    prisma.refGoldType.upsert({
      where: { code: 'ALTIN_BAR' },
      update: {},
      create: { code: 'ALTIN_BAR', name: 'AltÄ±n Bar/KÃ¼lÃ§e', description: 'AltÄ±n kÃ¼lÃ§e veya bar' },
    }),

    // DiÄŸer
    prisma.refGoldType.upsert({
      where: { code: 'DIGER_ZIYNET' },
      update: {},
      create: {
        code: 'DIGER_ZIYNET',
        name: 'DiÄŸer Ziynet',
        description: 'DiÄŸer ziynet eÅŸyalarÄ±',
      },
    }),
  ])

  console.log('âœ… AltÄ±n tÃ¼rleri eklendi (13 tÃ¼r)')

  // AltÄ±n ayarlarÄ± - TÃ¼rkiye'de kullanÄ±lan ayarlar
  const goldPurities = await Promise.all([
    prisma.refGoldPurity.upsert({
      where: { code: '24K' },
      update: {},
      create: {
        code: '24K',
        name: '24 Ayar AltÄ±n',
        purity: 24.0,
      },
    }),
    prisma.refGoldPurity.upsert({
      where: { code: '22K' },
      update: {},
      create: {
        code: '22K',
        name: '22 Ayar AltÄ±n',
        purity: 22.0,
      },
    }),
    prisma.refGoldPurity.upsert({
      where: { code: '18K' },
      update: {},
      create: {
        code: '18K',
        name: '18 Ayar AltÄ±n',
        purity: 18.0,
      },
    }),
    prisma.refGoldPurity.upsert({
      where: { code: '14K' },
      update: {},
      create: {
        code: '14K',
        name: '14 Ayar AltÄ±n',
        purity: 14.0,
      },
    }),
    prisma.refGoldPurity.upsert({
      where: { code: '8K' },
      update: {},
      create: {
        code: '8K',
        name: '8 Ayar AltÄ±n',
        purity: 8.0,
      },
    }),
  ])

  console.log('âœ… AltÄ±n ayarlarÄ± eklendi (5 ayar)')

  // Bankalar - TÃ¼rkiye'de Aktif Ã‡alÄ±ÅŸan Bankalar (2025)
  const banks = await Promise.all([
    // Kamu BankalarÄ±
    prisma.refBank.upsert({
      where: { asciiName: 'Ziraat Bankasi' },
      update: {},
      create: {
        name: 'Ziraat BankasÄ±',
        asciiName: 'Ziraat Bankasi',
        swiftBic: 'TCZBTR2A',
        bankCode: '0010',
        website: 'https://www.ziraatbank.com.tr',
      },
    }),
    prisma.refBank.upsert({
      where: { asciiName: 'Halkbank' },
      update: {},
      create: {
        name: 'Halkbank',
        asciiName: 'Halkbank',
        swiftBic: 'TRHBTR2A',
        bankCode: '0012',
        website: 'https://www.halkbank.com.tr',
      },
    }),
    prisma.refBank.upsert({
      where: { asciiName: 'VakifBank' },
      update: {},
      create: {
        name: 'VakÄ±fBank',
        asciiName: 'VakifBank',
        swiftBic: 'TVBATR2A',
        bankCode: '0015',
        website: 'https://www.vakifbank.com.tr',
      },
    }),

    // Ã–zel Bankalar
    prisma.refBank.upsert({
      where: { asciiName: 'Akbank' },
      update: {},
      create: {
        name: 'Akbank',
        asciiName: 'Akbank',
        swiftBic: 'AKBKTRIS',
        bankCode: '0046',
        website: 'https://www.akbank.com',
      },
    }),
    prisma.refBank.upsert({
      where: { asciiName: 'Garanti BBVA' },
      update: {},
      create: {
        name: 'Garanti BBVA',
        asciiName: 'Garanti BBVA',
        swiftBic: 'TGBATRIS',
        bankCode: '0062',
        website: 'https://www.garantibbva.com.tr',
      },
    }),
    prisma.refBank.upsert({
      where: { asciiName: 'Is Bankasi' },
      update: {},
      create: {
        name: 'Ä°ÅŸ BankasÄ±',
        asciiName: 'Is Bankasi',
        swiftBic: 'ISBKTRIS',
        bankCode: '0064',
        website: 'https://www.isbank.com.tr',
      },
    }),
    prisma.refBank.upsert({
      where: { asciiName: 'Yapi Kredi' },
      update: {},
      create: {
        name: 'YapÄ± Kredi',
        asciiName: 'Yapi Kredi',
        swiftBic: 'YAPITRIS',
        bankCode: '0067',
        website: 'https://www.yapikredi.com.tr',
      },
    }),
    prisma.refBank.upsert({
      where: { asciiName: 'Denizbank' },
      update: {},
      create: {
        name: 'Denizbank',
        asciiName: 'Denizbank',
        swiftBic: 'DENIZTR3',
        bankCode: '0134',
        website: 'https://www.denizbank.com',
      },
    }),
    prisma.refBank.upsert({
      where: { asciiName: 'QNB Finansbank' },
      update: {},
      create: {
        name: 'QNB Finansbank',
        asciiName: 'QNB Finansbank',
        swiftBic: 'FNNBTRIS',
        bankCode: '0111',
        website: 'https://www.qnbfinansbank.com',
      },
    }),
    prisma.refBank.upsert({
      where: { asciiName: 'TEB' },
      update: {},
      create: {
        name: 'TEB (TÃ¼rk Ekonomi BankasÄ±)',
        asciiName: 'TEB',
        swiftBic: 'TEBUTRIS',
        bankCode: '0032',
        website: 'https://www.teb.com.tr',
      },
    }),
    prisma.refBank.upsert({
      where: { asciiName: 'Sekerbank' },
      update: {},
      create: {
        name: 'Åžekerbank',
        asciiName: 'Sekerbank',
        swiftBic: 'TEBUTRIS',
        bankCode: '0059',
        website: 'https://www.sekerbank.com.tr',
      },
    }),
    prisma.refBank.upsert({
      where: { asciiName: 'Alternatifbank' },
      update: {},
      create: {
        name: 'Alternatifbank',
        asciiName: 'Alternatifbank',
        swiftBic: 'ALTRTR00',
        bankCode: '0124',
        website: 'https://www.alternatifbank.com.tr',
      },
    }),
    prisma.refBank.upsert({
      where: { asciiName: 'Odeabank' },
      update: {},
      create: {
        name: 'Odeabank',
        asciiName: 'Odeabank',
        swiftBic: 'ODNBTR2A',
        bankCode: '0146',
        website: 'https://www.odeabank.com.tr',
      },
    }),

    // YabancÄ± Bankalar
    prisma.refBank.upsert({
      where: { asciiName: 'ING' },
      update: {},
      create: {
        name: 'ING Bank',
        asciiName: 'ING',
        swiftBic: 'INGBTRIS',
        bankCode: '0099',
        website: 'https://www.ing.com.tr',
      },
    }),
    prisma.refBank.upsert({
      where: { asciiName: 'HSBC' },
      update: {},
      create: {
        name: 'HSBC Bank',
        asciiName: 'HSBC',
        swiftBic: 'HSBCTRIS',
        bankCode: '0123',
        website: 'https://www.hsbc.com.tr',
      },
    }),
    prisma.refBank.upsert({
      where: { asciiName: 'Citibank' },
      update: {},
      create: {
        name: 'Citibank',
        asciiName: 'Citibank',
        swiftBic: 'CTFHTRIS',
        bankCode: '0092',
        website: 'https://www.citibank.com.tr',
      },
    }),

    // KatÄ±lÄ±m BankalarÄ±
    prisma.refBank.upsert({
      where: { asciiName: 'Kuveyt Turk' },
      update: {},
      create: {
        name: 'Kuveyt TÃ¼rk KatÄ±lÄ±m BankasÄ±',
        asciiName: 'Kuveyt Turk',
        swiftBic: 'KTEFTRIS',
        bankCode: '0205',
        website: 'https://www.kuveytturk.com.tr',
      },
    }),
    prisma.refBank.upsert({
      where: { asciiName: 'Albaraka Turk' },
      update: {},
      create: {
        name: 'Albaraka TÃ¼rk KatÄ±lÄ±m BankasÄ±',
        asciiName: 'Albaraka Turk',
        swiftBic: 'BTKATRIS',
        bankCode: '0203',
        website: 'https://www.albaraka.com.tr',
      },
    }),
    prisma.refBank.upsert({
      where: { asciiName: 'Turkiye Finans' },
      update: {},
      create: {
        name: 'TÃ¼rkiye Finans KatÄ±lÄ±m BankasÄ±',
        asciiName: 'Turkiye Finans',
        swiftBic: 'FBITTR2X',
        bankCode: '0206',
        website: 'https://www.turkiyefinans.com.tr',
      },
    }),
    prisma.refBank.upsert({
      where: { asciiName: 'Ziraat Katilim' },
      update: {},
      create: {
        name: 'Ziraat KatÄ±lÄ±m BankasÄ±',
        asciiName: 'Ziraat Katilim',
        swiftBic: 'TVZITRIS',
        bankCode: '0209',
        website: 'https://www.ziraatkatilim.com.tr',
      },
    }),
    prisma.refBank.upsert({
      where: { asciiName: 'Vakif Katilim' },
      update: {},
      create: {
        name: 'VakÄ±f KatÄ±lÄ±m BankasÄ±',
        asciiName: 'Vakif Katilim',
        swiftBic: 'TVKBTRIS',
        bankCode: '0210',
        website: 'https://www.vakifkatilim.com.tr',
      },
    }),
  ])

  console.log('âœ… Bankalar eklendi (21 banka)')

  // Sistem Parametreleri - Referans tablolarÄ± SystemParameter'a migrate et
  console.log('\nðŸ”„ Sistem parametreleri oluÅŸturuluyor...')

  // BANK parametreleri
  for (const bank of banks) {
    await prisma.systemParameter.upsert({
      where: {
        paramGroup_paramCode: {
          paramGroup: 'BANK',
          paramCode: bank.asciiName.toUpperCase().replace(/\s+/g, '_'),
        },
      },
      update: {},
      create: {
        paramGroup: 'BANK',
        paramCode: bank.asciiName.toUpperCase().replace(/\s+/g, '_'),
        paramValue: bank.name,
        displayName: bank.name,
        description: `${bank.name} - SWIFT: ${bank.swiftBic || 'N/A'}`,
        displayOrder: banks.indexOf(bank) + 1,
        metadata: {
          swiftBic: bank.swiftBic,
          bankCode: bank.bankCode,
          website: bank.website,
          asciiName: bank.asciiName,
        },
        isActive: bank.active,
      },
    })
  }
  console.log(`âœ… BANK parametreleri eklendi (${banks.length} banka)`)

  // ACCOUNT_TYPE parametreleri
  for (const accType of accountTypes) {
    await prisma.systemParameter.upsert({
      where: {
        paramGroup_paramCode: {
          paramGroup: 'ACCOUNT_TYPE',
          paramCode: accType.code,
        },
      },
      update: {},
      create: {
        paramGroup: 'ACCOUNT_TYPE',
        paramCode: accType.code,
        paramValue: accType.name,
        displayName: accType.name,
        description: accType.description,
        displayOrder: accountTypes.indexOf(accType) + 1,
        metadata: {},
        isActive: accType.active,
      },
    })
  }
  console.log(`âœ… ACCOUNT_TYPE parametreleri eklendi (${accountTypes.length} tÃ¼r)`)

  // GOLD_TYPE parametreleri
  for (const goldType of goldTypes) {
    await prisma.systemParameter.upsert({
      where: {
        paramGroup_paramCode: {
          paramGroup: 'GOLD_TYPE',
          paramCode: goldType.code,
        },
      },
      update: {},
      create: {
        paramGroup: 'GOLD_TYPE',
        paramCode: goldType.code,
        paramValue: goldType.name,
        displayName: goldType.name,
        description: goldType.description,
        displayOrder: goldTypes.indexOf(goldType) + 1,
        metadata: {},
        isActive: goldType.active,
      },
    })
  }
  console.log(`âœ… GOLD_TYPE parametreleri eklendi (${goldTypes.length} tÃ¼r)`)

  // GOLD_PURITY parametreleri
  for (const purity of goldPurities) {
    await prisma.systemParameter.upsert({
      where: {
        paramGroup_paramCode: {
          paramGroup: 'GOLD_PURITY',
          paramCode: purity.code,
        },
      },
      update: {},
      create: {
        paramGroup: 'GOLD_PURITY',
        paramCode: purity.code,
        paramValue: purity.name,
        displayName: purity.name,
        description: `${purity.name} - ${purity.purity} ayar`,
        displayOrder: goldPurities.indexOf(purity) + 1,
        metadata: {
          purity: purity.purity.toString(),
          code: purity.code,
        },
        isActive: purity.active,
      },
    })
  }
  console.log(`âœ… GOLD_PURITY parametreleri eklendi (${goldPurities.length} ayar)`)

  // TX_TYPE parametreleri
  for (const txType of txTypes) {
    await prisma.systemParameter.upsert({
      where: {
        paramGroup_paramCode: {
          paramGroup: 'TX_TYPE',
          paramCode: txType.code,
        },
      },
      update: {},
      create: {
        paramGroup: 'TX_TYPE',
        paramCode: txType.code,
        paramValue: txType.name,
        displayName: txType.name,
        description: `${txType.name} iÅŸlemleri`,
        displayOrder: txTypes.indexOf(txType) + 1,
        metadata: {
          icon: txType.icon,
          color: txType.color,
        },
        isActive: txType.active,
      },
    })
  }
  console.log(`âœ… TX_TYPE parametreleri eklendi (${txTypes.length} tÃ¼r)`)

  // TX_CATEGORY parametreleri
  const categories = await prisma.transactionCategory.findMany()
  for (const category of categories) {
    await prisma.systemParameter.upsert({
      where: {
        paramGroup_paramCode: {
          paramGroup: 'TX_CATEGORY',
          paramCode: `${category.code}_${category.txTypeId}`,
        },
      },
      update: {},
      create: {
        paramGroup: 'TX_CATEGORY',
        paramCode: `${category.code}_${category.txTypeId}`,
        paramValue: category.name,
        displayName: category.name,
        description: category.description,
        displayOrder: categories.indexOf(category) + 1,
        metadata: {
          txTypeId: category.txTypeId,
          icon: category.icon,
          color: category.color,
          isDefault: category.isDefault,
        },
        isActive: category.active,
      },
    })
  }
  console.log(`âœ… TX_CATEGORY parametreleri eklendi (${categories.length} kategori)`)

  // PAYMENT_METHOD parametreleri
  for (const method of paymentMethods) {
    await prisma.systemParameter.upsert({
      where: {
        paramGroup_paramCode: {
          paramGroup: 'PAYMENT_METHOD',
          paramCode: method.code,
        },
      },
      update: {},
      create: {
        paramGroup: 'PAYMENT_METHOD',
        paramCode: method.code,
        paramValue: method.name,
        displayName: method.name,
        description: method.description,
        displayOrder: paymentMethods.indexOf(method) + 1,
        metadata: {},
        isActive: method.active,
      },
    })
  }
  console.log(`âœ… PAYMENT_METHOD parametreleri eklendi (${paymentMethods.length} yÃ¶ntem)`)

  // CURRENCY parametreleri
  for (const currency of currencies) {
    await prisma.systemParameter.upsert({
      where: {
        paramGroup_paramCode: {
          paramGroup: 'CURRENCY',
          paramCode: currency.code,
        },
      },
      update: {},
      create: {
        paramGroup: 'CURRENCY',
        paramCode: currency.code,
        paramValue: currency.name,
        displayName: `${currency.name} (${currency.symbol})`,
        description: `${currency.name} - ${currency.code}`,
        displayOrder: currencies.indexOf(currency) + 1,
        metadata: {
          symbol: currency.symbol,
          code: currency.code,
        },
        isActive: currency.active,
      },
    })
  }
  console.log(`âœ… CURRENCY parametreleri eklendi (${currencies.length} para birimi)`)

  console.log('\nðŸŽ‰ TÃ¼m sistem parametreleri eklendi!\n')

  // Demo veriler
  const tryCurrency = currencies.find(c => c.code === 'TRY')!
  const usdCurrency = currencies.find(c => c.code === 'USD')!
  const vadesizType = accountTypes.find(t => t.code === 'VADESIZ')!
  const dovizType = accountTypes.find(t => t.code === 'DOVIZ')!
  const ziraatBank = banks.find(b => b.name === 'Ziraat BankasÄ±')!
  const garantiBank = banks.find(b => b.name === 'Garanti BBVA')!

  // Demo hesaplar (sadece reference data iÃ§in, user-specific deÄŸil)
  console.log('âœ… Demo hesaplar atlandÄ± (user-specific olacak)')

  console.log('âœ… Demo hesaplar eklendi')

  // Demo kredi kartÄ± (sadece reference data iÃ§in, user-specific deÄŸil)
  console.log('âœ… Demo kredi kartlarÄ± atlandÄ± (user-specific olacak)')

  // Demo altÄ±n eÅŸyasÄ± (sadece reference data iÃ§in, user-specific deÄŸil)
  console.log('âœ… Demo altÄ±n eÅŸyalarÄ± atlandÄ± (user-specific olacak)')

  // Demo iÅŸlemler
  const maasCategory = gelirCategories.find(c => c.code === 'MAAS')!
  const marketCategory = giderCategories.find(c => c.code === 'MARKET')!
  const havaleMethod = paymentMethods.find(m => m.code === 'HAVALE_EFT')!
  const krediKartiMethod = paymentMethods.find(m => m.code === 'KREDI_KARTI')!

  // Demo iÅŸlemler (sadece reference data iÃ§in, user-specific deÄŸil)
  console.log('âœ… Demo iÅŸlemler atlandÄ± (user-specific olacak)')

  // Demo dÃ¶viz kurlarÄ±
  await Promise.all([
    prisma.fxRate.create({
      data: {
        fromCurrencyId: usdCurrency.id,
        toCurrencyId: tryCurrency.id,
        rate: 30.25,
        rateDate: new Date('2024-01-01'),
        source: 'TCMB',
      },
    }),
    prisma.fxRate.create({
      data: {
        fromCurrencyId: currencies.find(c => c.code === 'EUR')!.id,
        toCurrencyId: tryCurrency.id,
        rate: 33.15,
        rateDate: new Date('2024-01-01'),
        source: 'TCMB',
      },
    }),
    prisma.fxRate.create({
      data: {
        fromCurrencyId: currencies.find(c => c.code === 'XAU')!.id,
        toCurrencyId: tryCurrency.id,
        rate: 2040.5,
        rateDate: new Date('2024-01-01'),
        source: 'TCMB',
      },
    }),
  ])

  console.log('âœ… Demo dÃ¶viz kurlarÄ± eklendi')

  console.log('ðŸŽ‰ Seed tamamlandÄ±!')
}

main()
  .then(async () => {
    await prisma.$disconnect()
  })
  .catch(async e => {
    console.error(e)
    await prisma.$disconnect()
    process.exit(1)
  })
